[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "speech-transformer-training"
version = "0.1.0"
description = "Memory-efficient gradient accumulation for speech transformer training"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "TransformerTitan", email = "contact@transformertitan.dev"},
]
maintainers = [
    {name = "TransformerTitan", email = "contact@transformertitan.dev"},
]
keywords = [
    "speech-processing",
    "transformers",
    "pytorch",
    "gradient-accumulation",
    "memory-optimization",
    "wav2vec2",
    "whisper",
    "deep-learning",
    "speech-recognition",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.12.0",
    "torchaudio>=0.12.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "transformers>=4.20.0",
    "datasets>=2.0.0",
    "librosa>=0.9.0",
    "soundfile>=0.12.0",
    "tensorboard>=2.8.0",
    "wandb>=0.13.0",
    "omegaconf>=2.2.0",
    "hydra-core>=1.2.0",
    "tqdm>=4.64.0",
    "psutil>=5.9.0",
    "pynvml>=11.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
]
experiments = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.15.0",
    "plotly>=5.10.0",
]
audio = [
    "pyaudio>=0.2.11",
    "webrtcvad>=2.0.10",
    "speechbrain>=0.5.0",
    "espnet>=202209",
]

[project.urls]
Homepage = "https://github.com/TransformerTitan/SpeechTransformerTraining"
Repository = "https://github.com/TransformerTitan/SpeechTransformerTraining"
Documentation = "https://speechtransformertraining.readthedocs.io/"
"Bug Tracker" = "https://github.com/TransformerTitan/SpeechTransformerTraining/issues"
Changelog = "https://github.com/TransformerTitan/SpeechTransformerTraining/blob/main/CHANGELOG.md"

[project.scripts]
speech-train = "speech_transformer_training.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["speech_transformer_training*"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "transformers.*",
    "datasets.*",
    "wandb.*",
    "tensorboard.*",
    "pynvml.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=speech_transformer_training",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Flake8 configuration (in setup.cfg or .flake8, but shown here for completeness)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [".git", "__pycache__", "dist", "build", "*.egg-info"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

# Ruff configuration (modern alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["speech_transformer_training"]

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "22.12.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v0.991",
        hooks = [{id = "mypy", additional_dependencies = ["types-requests"]}]
    },
]
